CamelCase (capitalized with no space)
snake_case (lowercase with no spaces)

методы класса (напр. new) car.new , user.find(5), user.where(e-mail: 'gaf@mail.ru')
!!!методы класса объявляются двумя способами:
1. self.<method_name>
2. методы класса поместить в класс (class << self ... end)

методы класса используются если невозможно или нелогично их применить для объектов
методы класса наследуются подклассами
инстанс-переменные (@) отличаются от переменных класса (@@) тем, что значния в @ разделены между объектами класса (т.е. у каждого объекта класса инстанс-переменные принимают разные значения) а @@ одинаковы

для работа с переменными класса нужно использовать методы класса

!!! файлы с подклассами можно подгрузать в irb по мере необходимости

Ruby читает построчно код

??? динамичаское определение методов (программа пишет саму себя). мета-программирование

!!!вызов метода класса из инстанс-методов
self.class.<class_method_name>

!!!в документации
Class#method - инстанс метод (метод экземпляра класса)
Class.method - метод класса

---
модули 
!!! каждый модуль нужно помещать в отдельный файл


!!! цели модулей
1. Нэймспейсы (пространство имен. чтобы отделять одинаковые названия методов друг от друга. т.е. <name_space>.<method_name>)
2. логика без классов (Math, Kernel и т.п.)
3. Миксины (mix-in) разделение между классами (общий код(общая фукциональность\логикаы) для нескольких классов, но не является кодом родительского классаы)

--
Нэймспейсы

!!!объявление
1.
module <module_name>
class <class_name>
end
end
2.
class <module_name>::<class_name>
end


!!!если есть нэймспейсы, то файлы с ними должны быть в подпапке с таким же наименованием

!!!создание инстанса в нэймспейсе
<module_name>::<class_name>.<class_method_name>

!!! закомментировать блок кода ctrl+shift+\

--
миксины

объявляются как модули
!!!включаются
1.class <class_name>
include <module_name>
end

!!!включает методы как методы инстанса класса (нужен объект)

!!!включаются
2.class <class_name>
extend <module_name>
end

!!!включает модули как методы класса (объект не нужен)

!!!чтобы совместить в одном модуле и методы экземпляра и методы класса
module <module_name>
module ClassMethods
end
module InstanceMethods
end
end
!!!т.о. данный модуль становится нэймспэйсом и его можно подключать через include и extend
include <module_name>::InstanceMethods
extend <module_name>::ClassMethods

(напоминалка подключения нэймспейса инстанс-методов include-instance ii)

идиома - некий сложившийся прием

!!!есть конструкция/прием чтобы отдать управление модулю, какие именно методы включать в класс
!!!когда вызывается метод include, то срабатывает внутренний метод incleded (хук, колбэк)
объявить метод класса, который будет автоматически выбирать методы инстанса или методы класса
module <module_name>
#метод класса self.included (не включается в модуль, который включается в классе, а является методом самого модуля), чтобы передать управление модулю 
def self.included(base)
    #аналогично подключению в классе include Debugger::ClassMethods
    base.extend ClassMethods
    #base.include InstanceMethods #не сработает, т.к. InstanceMethods является приватным методом класса
    #аналогично подключению в классе include Debugger::InstanceMethods
    base.send :include, InstanceMethods
end
module ClassMethods
end
module InstanceMethods
end
end

!!! метод send (вызов метода = отправка сообщения). Через send можно вызывать приватный метод

!!!после использования метода self.included в классе вызов модуля идет одной строчкой
include <method_name>

!!!include, extend, protected, attr_reader, ..... - закрытые/приватные инстанс-методы класса Module 
Module.private_instance_methods
---
Объектная модель Ruby

"Всё является объектом" (инстанцирование)

"Всё является классом т.к. любой объект - потомок класса Class"

Есть базовый класс Object
Class это тоже класс 
при создании класса мы создаем объект(инстанс,экземпляр) класса Class, но не его наследника

!!!Объект - это класс(является экземпляром класса Class), а класс это - объект(класс Class потомок класса Object).

создание объекта класса равносильно созданию объекта класса Class (Class.new)

любой экземпляр является экземпляром класса Class

<class_name>.methods
пользовательские методы класса идут вначале списка

<class_name>.public_methods

<class_name>.instance_methods
методы экземпляра класса (равнозначно вызову car.methods для объекта car класса Car)

car.class #=> Car
Car.class #=> Class

показать базовый класс (т.е. инстанцирование. инстансом чего является класс Class. Класса Module)
Class.superclass #=> Module

Car.superclass #=> Object

Module.superclass #=> Object
Module.class #=> Class

Object.superclass #=> BasicObject
Object.class #=> Class

BasicObject.class #=> Class
BasicObject.superclass #=> nil

=====
http://www.eriktrautman.com/posts/ruby-explained-classes
--
def heal
  self.health = [self.health + 2, MAX_HEALTH].min
end
--
2.times { super }
--
def initialize(name, health, age, strength, weapon)
        super(name, health, age, strength)
        @weapon = weapon
end
===
<ClassName>.instance_variables
<ClassName>.class_variables
--
class Polygon
  class << self; attr_accessor :sides end
  @sides = 8
end
puts Polygon.sides # => 8

--
https://www.codecademy.com/courses/ruby-beginner-en-zfe3o/1/1

!!!вызов метода/константы из нэймспейса
Math::PI

!!!для подключения модуля можно использовать
require '<module_name>'
--
require 'date'

puts Date.today
--

??? перечень всех модулей (Math, Date,....)

!!!для подключения модуля(в класс) можно использовать
include <module_name>

!!! rand(10) #=> рандомное число до 10ти

include - подключает модуль на уровне объекта класса
extend - подключает модуль на уровне класса

!!!--
puts "It's #{Time.new.hour > 12 ? Time.new.hour - 12 : Time.new.hour}:#{Time.new.min} #{Time.new.hour > 12 ? 'PM' : 'AM'} (GMT)."
--

настаивают на явном указании типа метода (public/protected/private)

===
https://launchschool.com/books/oo_ruby/read/classes_and_objects_part2

class GoodDog
  DOG_YEARS = 7

  attr_accessor :name, :age

  def initialize(n, a)
    self.name = n
    self.age  = a * DOG_YEARS
  end
end
sparky = GoodDog.new("Sparky", 4)
puts sparky.age             # => 28
--

!!! можно переопределять стандартные методы to_s и т.д.
??? зачем(примеры)

!!! p <object> == puts <object>.inspect

