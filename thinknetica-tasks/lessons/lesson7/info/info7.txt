Блоки
операторные скобки {...} либо do ... end

передача блока в метод
методы принимают блоки

переменные/аргументы блока

!!! .inspect выводит значение в понятном виде (human readiable) (в строковом формате)

!!!можно добавлять аргументы в блоки
hash.each do |value| # [key=>value]
а можно и так
hash.each do |key, value| # #{key} #{value}
т.е. метод each может работать с различными значениями в зависимости от того, какое количество значений блок принимает

!!! модуль File содержит методы для работы с файлами

У методов есть много параметров. По умолчанию .open - открытие на чтение
читам построчно в блок
--
line_num = 0
File.open('block.rb').each do |line|
puts "#{line_num += 1}: #{line}"
end
--
!!! если после File.open или метода .each передать блок, то файл будет автоматически закрыт (ну нужно вызывать File.close)

3 способа можно сохранить блок как объект (класс Proc)
--------
1. Объект класса Proc #сокращенно от procedure
пример
a = Proc.new { |x| x = x * 10; puts x}
a.class
#=> Proc

2. Метод proc (класса Proc) модуля Kernel  
b = proc { |x| x = x * 10; puts x}
b.class
#=> Proc

3. метод lambda 
c = lambda { |x| x = x * 10 puts x}
c.class
#=> Proc (lambda)

===
такую запись
lambda { |x| puts x }
краткий вариант написания
->(x) { puts x }

===
!!! выполнить код блока
метод .call

a.call(<arguments_for_block>)
пример
a.call(5)

??? почему нет ошибки по аналогии с созданием объектов класса (когда есть предопределенные аргументы и выдается ошибка, если они не были заданы при создании инстанса класса)
!!!ответ lambda (создание анонимной функции или метода)

!!! метода lambda отличается от Proc.new или proc контролем количества аргументов (проверяет необходимость аргументов у вызова(call) и у блока)

!!!блоки в Ruby называются замыканиями
Замыкания - функции, которые сохраняют состояние окружения
т.е. сохраняют состояние локальных переменных в той области видимости, в которой они были определены функцией
scope - область видимости

x = "hello"
block = Proc.new { puts x }

def m(block)
x = "goodbye"
puts "X from method: #{x}"
block.call
end

===
написать свои функции, которые принимают блок

!!! метод yield
чтобы вызвать блок в методе (т.е. читаем код построчно, доходим до yield. если блок задан, то выводим его и возвращаясь в строку метод после yield продолжаем читать код метода)

--
пример
def m
puts "Before block"
yield
puts "After block"
end

m 
#=> Before block
#=>  LocalJumpError: no block given (yield)
т.е. в метод НЕ передан блок, но т.к. yield то блок должен быть передан
--
m { puts "Inside block"}
--
m 
#=> After block
#=> Inside block
#=> After block
в данным случае, блок передан НЕ как аргумент
------

??? тогда как yield понимает какой из блоков вызывать(именовать или что?)

---
def caps(str)
str.capitalize!
yield(str)
end

!!! вызов метода с передачей неявного блока в yield 
<method_name>(<arguments>) {<block>}

caps('abs') { |str| puts str[0]}
#=> A

-
!!! идиома - это прием т.е. типовой вариант написания определенного кода
-
!!! передача блока как именованного/явного аргумента в метод

def caps(str, block)
str.capitalize!
block.call(str)
end

!!!Способ 1 (передача именованного блока)
чтобы вызвать такой метод нужно
1. создать блок
block = lambda { |str| puts str}
2. вызов
caps 'abs', block

#=> Abs

!!!Cпособ 2(передача именованного блока)
при вызове именованного блока в методе, блок должен быть последним в списке аргументов и начинаться с символа апмерсанта &
def caps (str, &block)
str.capitalize!
block.call(str)
end

!!!при таком варианте можно передавать блок сразу в вызове метода
caps('abs') { |str| puts str[1]}
#=> A

Вызов неименованного блока(yield) достаточен для написания своих методов 
Вызов именованного блока(блок как именованная переменная) нужна для библиотечных функций или сложных функций(т.к. нужно иметь доступ к объекту блока. Можно узнать какую-то доп. информацию: количество запрашиваемых аргументов и т.п.)

!!! если в методе есть именованный аргумент блока, то yield будет вызывать передаваемый блок
def caps(str, &block)
str.capitalize!
block.call(str)
yield(str)
end

caps('abs') { |str| puts str[0]}
#=>A
#=>A

---
!!! блок может быть опциональный(метод опционально принимающий блок). И нужно определить нужен блок или нет
пример(rails. links. helper link_to передача данных через блок в ссылку)
def caps(str, &block)
if block_given?
yield(str)
else
puts str
end
end

caps 'abs'
#=>a
caps ('abs') { |str| puts "Yield block exist. #{str.capitalize!}"}
#=>abs

====
дополнительные материалы
pragmatic

5.times do |index|
puts "#{index} gaf"
end

!!! upto

1.upto(5) do |index|
puts "#{index} gaf"
end

!!! создание массивов через класс 
flyers << Flyer.new("Flyer #{count} ", "flyer#{count}@example.com",count*1000)

!!! <start_limit>.step(<upper_limit>,<step_interval>)
1.step(9, 2) do |count|
puts "#{count} situp"
end

#=>1 situp
#=>3 situp
#=>5 situp
#=>7 situp
#=>9 situp

!!!отличная визуальная картинка 

====
rubylearning

!!! приоритет {} выше, чем do...end

пример передачи параметров в вызове метода для yield  
def call_block
yield('hello', 99)
end
call_block {|str,num| puts str + ' ' + num.to_s}

#=> hello 99

!!! изменение значения локальных переменных блока

x = 10  
2.times do |x|  
  puts "x inside the block: #{x}"  
end  
puts "x outside the block: #{x}" 
#=> x outside the block: 0
#=> x outside the block: 1
#=> x outside the block: 10

---
x = 10  
2.times do |y|  
  x = y  
  puts "x inside the block: #{x}"  
end  
puts "x outside the block: #{x}" 
#=> x outside the block: 0
#=> x outside the block: 1
#=> x outside the block: 1

---
x = 10  
#y - переменная блока, x- локальная переменная
2.times do |y; x|  
  x = y  
  puts "x inside the block: #{x}"  
end  
puts "x outside the block: #{x}" 
#=> x outside the block: 0
#=> x outside the block: 1
#=> x outside the block: 10

